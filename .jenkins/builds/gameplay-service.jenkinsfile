pipeline {
    agent {
        kubernetes {
            label "gameplay-gateway"
            yamlFile ".jenkins/agents/build.yaml"
        }
    }
    when {
        anyOf {
            changeset "src/**"
            changeset "apps/gameplay-service/**"
            changeset ".jenkins/builds/gameplay-service.jenkinsfile"
            changeset ".jenkins/agents/build.yaml"
        }
    }
    environment {
        // Define the arguments as environment variables
        DOCKERFILE_PATH = "./apps/gameplay-service/Dockerfile"
        CONTEXT_PATH = "git://github.com/starci-lab/cifarm-containers"  // You can adjust this if the context path is relative
        IMAGE_NAME = "gameplay-service"
        TAG = "latest"  // Example tag for the image
        REGISTRY = "cifarm"  // Replace with your actual Docker registry
    }
    stages {
        stage("Checkout") {
            steps {
                script {
                    // Pulling source code from Git repository
                    echo "======== Checkout ========"
                    checkout scm  // This will checkout the code from the repository defined in Jenkins job configuration
                    echo "======== Checkout completed ========"
                }
            }
        }
        
        stage("Build") {
            container('kaniko') {
                steps {
                    // Building the Docker image using Kaniko
                    echo "======== Starting Kaniko build ========"
                    sh """
                        /kaniko/executor \
                            --context=${CONTEXT_PATH} \
                            --dockerfile=${DOCKERFILE_PATH} \
                            --destination=${REGISTRY}/${IMAGE_NAME}:${TAG}
                    """
                }
            }
        }
    }
    post {
        always {
            echo "======== Always block for the entire pipeline ========"
        }
        success {
            echo "======== Pipeline executed successfully ========"
        }
        failure {
            echo "======== Pipeline execution failed ========"
        }
    }
}
