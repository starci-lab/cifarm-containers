podTemplate {
    node(POD_LABEL) {
        stage('Run kubectl apply in Kubernetes Pod') {
            agent {
                kubernetes {
                    label 'kubectl-pod'  // Label to identify the pod
                    yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: kubectl-pod
spec:
  containers:
  - name: kubectl-container
    image: bitnami/kubectl:latest  // Using a container that has kubectl pre-installed
    command:
    - cat  // Keeps the container alive to run kubectl commands
    tty: true  // Allows interactive commands
  """
                }
            }
            steps {
                container('kubectl-container') {
                    script {
                        // Run kubectl apply to create a Kubernetes resource (example: deployment.yaml)
                        def yamlConfig = """
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hello-world
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hello-world
        image: nginx
        ports:
        - containerPort: 80
                        """
                        // Apply the resource to the cluster using kubectl
                        writeFile file: 'deployment.yaml', text: yamlConfig
                        sh 'kubectl apply -f deployment.yaml'

                        // Verify the deployment is created
                        sh 'kubectl get deployments'
                    }
                }
            }
        }
    }
}