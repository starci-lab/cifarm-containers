name: CI/CD Pipeline for Gameplay Service

on:
  push:
    branches:
      - build
    paths:
      - 'src/**'  # Trigger khi có thay đổi trong thư mục 'src'
      - 'apps/gameplay-service/**'  # Trigger khi có thay đổi trong thư mục 'apps/gameplay-service'

jobs:
  deployment:
    concurrency:
      group: "gameplay-service-deployment"
      cancel-in-progress: true
    runs-on: self-hosted
    environment: cifarm
    steps:
    - name: Checkout code
      uses: actions/checkout@v2 

    - name: Create namespace
      run: |
        kubectl create namespace build 2>/dev/null || echo "Namespace 'build' already exists"
        kubectl create namespace containers 2>/dev/null || echo "Namespace 'containers' already exists"

    - name: Apply Kaniko Build
      run: |
        kubectl delete pod gameplay-service-kaniko-build --namespace build 2>/dev/null || echo "Pod 'gameplay-service-kaniko-build' does not exist"
        if ! helm repo list | grep -q "cifarm"; then
          helm repo add cifarm https://starci-lab.github.io/cifarm-k8s/charts
        else
          helm repo update cifarm
        fi
        helm upgrade --install gameplay-service-build cifarm/build \
          --namespace build \
          --set imageCredentials.registry=${{secrets.DOCKER_SERVER}} \
          --set imageCredentials.username=${{secrets.DOCKER_USERNAME}} \
          --set imageCredentials.password=${{secrets.DOCKER_PASSWORD}} \
          --set imageCredentials.email=${{secrets.DOCKER_EMAIL}} \
          --set image.repository="cifarm/gameplay-service" \
          --set image.tag="latest" \
          --set image.dockerfile="./apps/gameplay-service/Dockerfile" \
          --set image.context="git://github.com/starci-lab/cifarm-containers" \
          --set resources.requests.cpu="50m" \
          --set resources.requests.memory="100Mi" \
          --set resources.limits.cpu="500m" \
          --set resources.limits.memory="1Gi"
  
    - name: Wait for Kaniko Build to Complete
      run: |
        while true; do
          if ! kubectl get pod gameplay-service-build-kaniko -n build > /dev/null 2>&1; then
            echo "Pod gameplay-service-build-kaniko no longer exists. Assuming it has completed."
            break
          fi

          STATUS=$(kubectl get pod gameplay-service-build-kaniko -n build -o jsonpath="{.status.containerStatuses[0].state.terminated.reason}" 2>/dev/null || echo "Pending")
          if [ "$STATUS" == "Completed" ]; then
            echo "Build Completed"
            break
          elif [ "$STATUS" == "Error" ]; then
            echo "Build Failed"
            exit 1
          else
            echo "Waiting for build to complete..."
            sleep 10
          fi
        done

    - name: Set Environment Variables
      run: |
        export CACHE_REDIS_HOST=cache-redis-master.databases.svc.cluster.local
        export CACHE_REDIS_PORT=6379

        export GAMEPLAY_POSTGRES_DBNAME=gameplay
        export GAMEPLAY_POSTGRES_HOST=gameplay-postgresql-postgresql-ha-pgpool.databases.svc.cluster.local
        export GAMEPLAY_POSTGRES_PORT=5432
        export GAMEPLAY_POSTGRES_USER=postgres
        export GAMEPLAY_POSTGRES_PASS=UqW1R2J7UhKv6Aqf

        export GAMEPLAY_SERVICE_PORT=3014

        export HEADLESS_KAFKA_1_HOST=kafka.brokers.svc.cluster.local
        export HEADLESS_KAFKA_1_PORT=9092
        export HEADLESS_KAFKA_2_HOST=kafka.brokers.svc.cluster.local
        export HEADLESS_KAFKA_2_PORT=9092
        export HEADLESS_KAFKA_3_HOST=kafka.brokers.svc.cluster.local
        export HEADLESS_KAFKA_3_PORT=9092
        export KAFKA_1_HOST=kafka.brokers.svc.cluster.local
        export KAFKA_1_PORT=9092

        export JWT_SECRET="C3ZofmtZ+hXQF2d~&bBu9x'UtkUyz?)MwXiXy_eGFlyO|:v!JW$?iZ&U6:kPQg("
        export JWT_ACCESS_TOKEN_EXPIRATION=5m
        export JWT_REFRESH_TOKEN_EXPIRATION=7d

        printenv

    - name: Deploy Gameplay Service with Helm
      run: |
        helm upgrade --install gameplay-service cifarm/deployment \
          --namespace containers \
          --set image.repository="cifarm/gameplay-service" \
          --set image.tag="latest" \
          --set service.port=$GAMEPLAY_SERVICE_PORT \
          --set service.targetPort=$GAMEPLAY_SERVICE_PORT \
          --set env.CACHE_REDIS_HOST=$CACHE_REDIS_HOST \
          --set env.CACHE_REDIS_PORT=$CACHE_REDIS_PORT \
          --set env.GAMEPLAY_POSTGRES_DBNAME=$GAMEPLAY_POSTGRES_DBNAME \
          --set env.GAMEPLAY_POSTGRES_HOST=$GAMEPLAY_POSTGRES_HOST \
          --set env.GAMEPLAY_POSTGRES_PORT=$GAMEPLAY_POSTGRES_PORT \
          --set env.GAMEPLAY_POSTGRES_USER=$GAMEPLAY_POSTGRES_USER \
          --set env.GAMEPLAY_POSTGRES_PASS=$GAMEPLAY_POSTGRES_PASS \
          --set env.HEADLESS_KAFKA_1_HOST=$HEADLESS_KAFKA_1_HOST \
          --set env.HEADLESS_KAFKA_1_PORT=$HEADLESS_KAFKA_1_PORT \
          --set env.HEADLESS_KAFKA_2_HOST=$HEADLESS_KAFKA_2_HOST \
          --set env.HEADLESS_KAFKA_2_PORT=$HEADLESS_KAFKA_2_PORT \
          --set env.HEADLESS_KAFKA_3_HOST=$HEADLESS_KAFKA_3_HOST \
          --set env.HEADLESS_KAFKA_3_PORT=$HEADLESS_KAFKA_3_PORT \
          --set env.KAFKA_1_HOST=$KAFKA_1_HOST \
          --set env.KAFKA_1_PORT=$KAFKA_1_PORT \
          --set env.JWT_SECRET="$JWT_SECRET" \
          --set env.JWT_ACCESS_TOKEN_EXPIRATION=$JWT_ACCESS_TOKEN_EXPIRATION \
          --set env.JWT_REFRESH_TOKEN_EXPIRATION=$JWT_REFRESH_TOKEN_EXPIRATION

    - name: Verify Deployment
      run: |
        kubectl rollout status deployment/gameplay-service \
          --namespace containers
