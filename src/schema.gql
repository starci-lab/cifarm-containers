type UpgradeEntity {
  upgradePrice: Int!
  capacity: Int!
  building: BuildingEntity!
}

type BuildingEntity {
  availableInShop: Boolean!
  type: String
  maxUpgrade: Int!
  price: Int
  upgrades: [UpgradeEntity!]
  placedItemType: PlacedItemTypeEntity
}

type TileEntity {
  price: Float!
  maxOwnership: Int!
  isNFT: Boolean!
  availableInShop: Boolean!
  inventoryType: InventoryTypeEntity
  placedItemType: PlacedItemTypeEntity
}

type UserEntity {
  username: String!
  chainKey: String!
  network: String!
  accountAddress: String!
  golds: Int!
  tokens: Float!
  experiences: Int!
  energy: Int!
  level: Int!
  inventories: [InventoryEntity!]!
  placedItems: [PlacedItemEntity!]!
}

type AnimalInfoEntity {
  currentGrowthTime: Float!
  currentHungryTime: Float!
  currentYieldTime: Float!
  hasYielded: Boolean!
  isAdult: Boolean!
  animal: AnimalEntity!
  currentState: String!
  harvestQuantityRemaining: Int!
  alreadySick: Boolean!
  placedItem: PlacedItemEntity!
}

type BuildingInfoEntity {
  currentUpgrade: Float!
  occupancy: Float!
  building: BuildingEntity!
  placedItem: PlacedItemEntity!
}

type CropEntity {
  growthStageDuration: Int!
  growthStages: Int!
  price: Int!
  premium: Boolean!
  perennialCount: Int!
  nextGrowthStageAfterHarvest: Int!
  minHarvestQuantity: Int!
  maxHarvestQuantity: Int!
  basicHarvestExperiences: Int!
  premiumHarvestExperiences: Int!
  availableInShop: Boolean!
  maxStack: Int!
  inventoryType: InventoryTypeEntity
}

type SeedGrowthInfoEntity {
  currentStage: Int!
  currentStageTimeElapsed: Int!
  totalTimeElapsed: Int!
  currentPerennialCount: Int!
  harvestQuantityRemaining: Int!
  crop: CropEntity!
  currentState: String!
  fullyMatured: Boolean!
  isFertilized: Boolean!
  placedItemId: String!
  placedItem: PlacedItemEntity!
}

type PlacedItemEntity {
  x: String!
  y: String!
  userId: String
  user: UserEntity
  inventoryId: String
  seedGrowthInfo: SeedGrowthInfoEntity
  animalInfo: AnimalInfoEntity
  buildingInfo: BuildingInfoEntity
  placedItems: [PlacedItemEntity!]!
  parentId: String
  parent: String
  placedItemTypeId: String
  placedItemType: PlacedItemTypeEntity
}

type PlacedItemTypeEntity {
  type: String!
  placedItems: [PlacedItemEntity!]
}

type AnimalEntity {
  yieldTime: Int!
  offspringPrice: Int!
  isNFT: Boolean!
  price: Int!
  growthTime: Int!
  availableInShop: Boolean!
  hungerTime: Int!
  minHarvestQuantity: Int!
  maxHarvestQuantity: Int!
  basicHarvestExperiences: Int!
  premiumHarvestExperiences: Int!
  type: String!
  sickChance: Float!
  inventoryType: InventoryTypeEntity
  placedItemType: PlacedItemTypeEntity
}

type SupplyEntity {
  type: String!
  price: Float!
  availableInShop: Boolean!
  maxStack: Int!
  fertilizerEffectTimeReduce: Int
  inventoryType: InventoryTypeEntity
}

type InventoryTypeEntity {
  type: String!
  placeable: Boolean!
  deliverable: Boolean!
  asTool: Boolean!
  maxStack: Float!
  cropId: String
  animalId: String
  supplyId: String
  productId: String
  tileId: String
  inventories: [InventoryEntity!]
}

type InventoryEntity {
  quantity: String!
  tokenId: String
  premium: Boolean!
  isPlaced: Boolean!
  userId: String
  user: UserEntity
  inventoryTypeId: String
  inventoryType: InventoryTypeEntity!
}

type ToolEntity {
  availableIn: String!
  index: Int!
}

type DailyRewardPossibility {
  goldAmount: Int
  tokenAmount: Int
  thresholdMin: Float!
  thresholdMax: Float!
}

type DailyRewardEntity {
  amount: Int
  day: Int!
  isLastDay: Boolean!
  dailyRewardPossibilities: [DailyRewardPossibility!]
}

type SpinEntity {
  type: String!
  goldAmount: Int
  quantity: Int
  tokenAmount: Int
  thresholdMin: Float!
  thresholdMax: Float!
}

type Query {
  animals(args: GetAnimalsArgs!): [AnimalEntity!]!
  buildings(args: GetBuildingsArgs!): [BuildingEntity!]!
  crops(args: GetCropsArgs!): [CropEntity!]!
  dailyRewards(args: GetDailyRewardsArgs!): [DailyRewardEntity!]!
  spins(args: GetSpinsArgs!): [SpinEntity!]!
  supplies(args: GetSuppliesArgs!): [SupplyEntity!]!
  tiles(args: GetTilesArgs!): [TileEntity!]!
  tools(args: GetToolsArgs!): [ToolEntity!]!
  users(args: GetUsersArgs!): [UserEntity!]!
}

input GetAnimalsArgs {
  limit: Int
  offset: Int
}

input GetBuildingsArgs {
  limit: Int
  offset: Int
}

input GetCropsArgs {
  limit: Int
  offset: Int
}

input GetDailyRewardsArgs {
  limit: Int
  offset: Int
}

input GetSpinsArgs {
  limit: Int
  offset: Int
}

input GetSuppliesArgs {
  limit: Int
  offset: Int
}

input GetTilesArgs {
  limit: Int
  offset: Int
}

input GetToolsArgs {
  limit: Int = 10
  offset: Int = 0
}

"""GetUsersArgs"""
input GetUsersArgs {
  limit: Int = 10
  offset: Int = 0
}